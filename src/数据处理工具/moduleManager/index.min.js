/**
 * !info {Module}
 */
/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
/**
 * ModuleManager
 * @author Nomen
 * @description ModuleManager是在复杂环境下进行动态模块导入的解决方案，依赖于Require
 * @requires Require
 */
class ModuleManager{static Require=Require;static _log=console.log;static instance=null;static defaultConfig={};static isValidVersion(e){return/^(\^|~)?\d+\.\d+\.\d+$/.test(e);}static perfix={"^":(e,t)=>e[0]===t[0]&&e[1]===t[1]&&e[2]<=t[2],"~":(e,t)=>e[0]===t[0]&&e[1]<=t[1],"":(e,t)=>e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]};static getVersionSplited(e){return{version:[...(["^","~"].includes(e[0])?e.substr(1):e).split(".").map(e=>parseInt(e)).slice(0,3),...Array(3-e.split(".").length).fill(0)],prefix:e.startsWith("^")?"^":e.startsWith("~")?"~":""};}static StructureTypes={string:e=>"string"==typeof e,number:e=>"number"==typeof e,boolean:e=>"boolean"==typeof e,object:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,array:e=>Array.isArray(e),function:e=>"function"==typeof e,null:e=>null===e,undefined:e=>void 0===e,dependencies:e=>!("object"!=typeof e||Array.isArray(e))&&null!==e&&Object.entries(e).every(([e,t])=>"string"==typeof e&&this.isValidVersion(t)),version:e=>this.isValidVersion(e),any:()=>!0};static log(e){e instanceof Error?this._log(e.message+"\n"+e.stack):this._log(`${e}`);}static getInstance(...e){return null===this.instance&&(this.instance=new this(...e)),this.instance;}static getVerifyMap(){return{name:{type:["string"],required:!0},version:{type:["version"],required:!0},description:{type:["string"],required:!0},script:{type:["string"],required:!0},dependencies:{type:["dependencies"],required:!1}};}static verifyStructure(e,t=this.getVerifyMap()){Object.entries(t).forEach(([t,i])=>{if(i.required&&!Object.prototype.hasOwnProperty.call(e,t))throw Error(`${t} is required.`);if(i.type&&!i.type.some(i=>ModuleManager.StructureTypes[i](e[t])))throw Error(`${t} type is not correct. 
expect ${i.type} but got ${typeof e[t]}.`);});}config={};modules={};scripts={};constructor(e,t={}){this._init()._loadConfig(e).addModules(t).checkDependencies()._syncModules();}addModule(e,t,i=!0){return this.registerModuleDef(e).registerScript(e.name,t)._syncModules(),i&&this.checkDependencies(),this;}addModules(e){return Object.entries(e).forEach(([e,t])=>{this.addModule(t,t.script,!1);}),this.checkDependencies(),this;}registerModuleDef(e){return ModuleManager.verifyStructure(e),this.modules[e.name]=e,this;}registerScript(e,t){return this.scripts[e]=t,this;}getScript(e){return this.scripts[e]||(()=>{});}getRequirableModules(){let e={};return Object.entries(this.modules).forEach(([t,i])=>{e[t]=this.getScript(i.script);}),e;}findModule(e){return this.modules[e]||{};}hasModule(e){return this.findModule(e).name===e;}checkVersion(e,t){let i=ModuleManager.getVersionSplited(e),r=ModuleManager.getVersionSplited(t);return ModuleManager.perfix[i.prefix](i.version,r.version);}checkDependencies(){return Object.entries(this.modules).forEach(([e,t])=>{Object.entries(t.dependencies).forEach(([t,i])=>{if(!this.hasModule(t))throw Error(`Module ${e} has dependency ${t} but not found.`);if(!this.checkVersion(i,this.findModule(t).version))throw Error(`Module ${e} has dependency ${t} but version not match.`);});}),this;}build(){return this.checkDependencies()._syncModules();}require(e){return this._require.require(e);}_init(){return this._require=Reflect.construct(ModuleManager.Require,[]),this;}_addModule(e,t){return this._require.addModule(e,t),this;}_syncModules(){return this._require.addModules(this.getRequirableModules()),this;}_loadConfig(e){return Object.keys(ModuleManager.defaultConfig).forEach(t=>{this.config[t]=Object.prototype.hasOwnProperty.call(e,t)?e[t]:ModuleManager.defaultConfig[t];}),this;}}


